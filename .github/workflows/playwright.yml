name: Playwright Tests
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  NODE_VERSION: "20.10.0"

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
        if: github.event_name == 'pull_request'

      - uses: actions/checkout@v4
        if: github.event_name != 'pull_request'

      - name: Fetch base branch for comparison
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run Changed files only
        if: github.event_name == 'push'
        run: |
          echo "Running tests for changes between ${{ github.base_ref }} and current branch"
          npx playwright test --only-changed=${{ github.base_ref }}
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      - name: Deploy to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: playwright-report
          destination_dir: ${{ github.sha }}

      - name: Generate and log Playwright report URL
        if: always()
        run: |
          repo_name=${{ github.repository }} && repo_name=${repo_name#*/}
          reportUrl="https://${{ github.repository_owner }}.github.io/$repo_name/${{ github.sha }}/"
          echo "Playwright Test Report available at: $reportUrl"

      - name: Cleanup old reports
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const { data: branch } = await github.rest.repos.getBranch({
              owner,
              repo,
              branch: 'gh-pages',
            });
            const { data: tree } = await github.rest.git.getTree({
              owner,
              repo,
              tree_sha: branch.commit.sha,
              recursive: 'true'
            });
            const now = new Date();
            const oldReports = tree.tree
              .filter(item => item.type === 'tree' && /^[a-f0-9]{40}$/.test(item.path))
              .filter(item => {
                const reportDate = new Date(item.path.substring(0, 10));
                const daysDiff = (now - reportDate) / (1000 * 60 * 60 * 24);
                return daysDiff > 30;
              })
              .map(item => item.path);
            if (oldReports.length > 0) {
              await github.rest.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: '.cleanup',
                message: 'Cleanup old reports',
                content: Buffer.from(oldReports.join('\n')).toString('base64'),
                branch: 'gh-pages',
              });
            }
