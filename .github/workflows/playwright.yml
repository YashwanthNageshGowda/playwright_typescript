name: Playwright Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  NODE_VERSION: "20.10.0"

jobs:
  test:
    timeout-minutes: 60
    environment: production
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pages: write
      id-token: write

    concurrency:
      group: "pages"
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
        if: github.event_name == 'pull_request'

      - uses: actions/checkout@v4
        if: github.event_name != 'pull_request'

      - name: Fetch base branch for comparison
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - run: npm ci

      - name: Install jq
        run: sudo apt-get install jq

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run Changed files only
        if: github.event_name == 'pull_request'
        run: |
          echo "Running tests for changes between ${{ github.base_ref }} and current branch"
          npx playwright test --only-changed=${{ github.base_ref }}

      - name: Run regression only
        if: github.event_name == 'push'
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          USER_NAME: ${{ secrets.USER_NAME }}
        run: |
          TAGS='@regression' npx playwright test --project=tests

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Setup Pages
        if: always()
        uses: actions/configure-pages@v4

      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_OUTPUT

      # Upload and deploy to GitHub Pages (new way)
      - name: Upload Pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: playwright-report/

      - name: Deploy to GitHub Pages
        if: always()
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Cleanup old directories from gh-pages branch
      - name: Checkout gh-pages branch
        if: always()
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages-branch

      # Deploy to gh-pages branch
      - name: Deploy to gh-pages branch
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: playwright-report
          destination_dir: Playwright-report-${{ steps.timestamp.outputs.timestamp }}
          keep_files: true

      # Parse test results
      - name: Parse test results
        id: test-results
        if: always()
        run: |
          if [ -f "playwright-report/results.json" ]; then
            # Parse JSON and extract test counts
            passed=$(jq '.suites[].specs[].tests[] | select(.status=="passed") | .status' playwright-report/results.json | wc -l)
            failed=$(jq '.suites[].specs[].tests[] | select(.status=="failed") | .status' playwright-report/results.json | wc -l)
            skipped=$(jq '.suites[].specs[].tests[] | select(.status=="skipped") | .status' playwright-report/results.json | wc -l)
            total=$((passed + failed + skipped))
            
            # Set outputs
            echo "passed=$passed" >> $GITHUB_OUTPUT
            echo "failed=$failed" >> $GITHUB_OUTPUT
            echo "skipped=$skipped" >> $GITHUB_OUTPUT
            echo "total=$total" >> $GITHUB_OUTPUT
          else
            echo "No test results found"
            exit 1
          fi

      - name: Send Test Results to Slack
        if: always()
        run: |
          npx slack-ctrf results ctrf/ctrf-report.json
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Generate and log Playwright report URLs
        if: always()
        run: |
          repo_name=${{ github.repository }} && repo_name=${repo_name#*/}
          report_url="https://${{ github.repository_owner }}.github.io/$repo_name/"
          echo "Playwright Test Report available at: $report_url"
