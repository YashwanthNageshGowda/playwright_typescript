name: Playwright Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  NODE_VERSION: "20.10.0"

jobs:
  test:
    timeout-minutes: 60
    environment: production
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pages: write
      id-token: write

    concurrency:
      group: "pages"
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
        if: github.event_name == 'pull_request'

      - uses: actions/checkout@v4
        if: github.event_name != 'pull_request'

      - name: Fetch base branch for comparison
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run Changed files only
        if: github.event_name == 'pull_request'
        run: |
          echo "Running tests for changes between ${{ github.base_ref }} and current branch"
          npx playwright test --only-changed=${{ github.base_ref }}

      - name: Run regression only
        if: github.event_name == 'push'
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          USER_NAME: ${{ secrets.USER_NAME }}
        run: |
          TAGS='@regression' npx playwright test --project=tests

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Setup Pages
        if: always()
        uses: actions/configure-pages@v4

      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_OUTPUT

      # Upload and deploy to GitHub Pages (new way)
      - name: Upload Pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: playwright-report/

      - name: Deploy to GitHub Pages
        if: always()
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Cleanup old directories from gh-pages branch
      - name: Checkout gh-pages branch
        if: always()
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages-branch

      - name: Clean up old directories
        if: always()
        working-directory: gh-pages-branch
        run: |
          # Get current timestamp
          current_timestamp=$(date +%s)
          # 3 days in seconds
          cutoff_seconds=$((3 * 24 * 60 * 60))

          # Create an array to store directories to delete
          declare -a dirs_to_delete

          # Find directories older than 3 days
          for dir in */; do
            if [[ $dir == *-20* ]]; then  # Only process timestamp directories
              # Extract the timestamp part (assuming format: sha-YYYY-MM-DD-HH-MM-SS)
              dir_date=$(echo $dir | grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}-[0-9]\{2\}-[0-9]\{2\}-[0-9]\{2\}')
              if [ ! -z "$dir_date" ]; then
                # Convert directory date to timestamp
                dir_timestamp=$(date -d "${dir_date//-/ }" +%s 2>/dev/null)
                if [ ! -z "$dir_timestamp" ]; then
                  # Calculate age in seconds
                  age=$((current_timestamp - dir_timestamp))
                  if [ $age -gt $cutoff_seconds ]; then
                    dirs_to_delete+=("$dir")
                  fi
                fi
              fi
            fi
          done

          # Delete old directories if any found
          if [ ${#dirs_to_delete[@]} -gt 0 ]; then
            echo "Deleting old directories:"
            printf '%s\n' "${dirs_to_delete[@]}"
            rm -rf "${dirs_to_delete[@]}"
            
            # Configure git
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            
            # Commit and push changes if any files were deleted
            git add -A
            git commit -m "Cleanup: Remove reports older than 3 days" || echo "No changes to commit"
            git push
          else
            echo "No old directories to clean up"
          fi

      # Deploy to gh-pages branch
      - name: Deploy to gh-pages branch
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: playwright-report
          destination_dir: ${{ github.sha }}-${{ steps.timestamp.outputs.timestamp }}
          keep_files: true

      - name: Generate and log Playwright report URLs
        if: always()
        run: |
          repo_name=${{ github.repository }} && repo_name=${repo_name#*/}
          pages_url="https://${{ github.repository_owner }}.github.io/$repo_name/"
          branch_url="https://${{ github.repository_owner }}.github.io/$repo_name/${{ github.sha }}-${{ steps.timestamp.outputs.timestamp }}/"
          echo "Playwright Test Report (Pages) available at: $pages_url"
          echo "Playwright Test Report (Branch) available at: $branch_url"
